{"version":2,"kind":"Notebook","sha256":"af49b1db30fe9319e377b5ff8afe08057f601849c4eb64d85ad3e4febc0e7d4b","slug":"notebooks.ex-regrid-plot","location":"/notebooks/ex-regrid-plot.ipynb","dependencies":[],"frontmatter":{"title":"Demo: Regridding and Plotting with Rooki and Cartopy","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/esgf-cookbook","copyright":"2023","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/esgf-cookbook/blob/main/notebooks/ex-regrid-plot.ipynb","thumbnail":"/esgf-cookbook/build/esgf-065ffa13a41f1576178001062ff875bd.png","exports":[{"format":"ipynb","filename":"ex-regrid-plot.ipynb","url":"/esgf-cookbook/build/ex-regrid-plot-3a90c53edb4062430bccbb1705f98e40.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"image","url":"/esgf-cookbook/build/esgf-065ffa13a41f1576178001062ff875bd.png","alt":"ESGF logo","key":"zYNiVSqGIl","urlSource":"images/esgf.png"},{"type":"text","value":"\n","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zdFPS7zSL3"},{"type":"image","url":"/esgf-cookbook/build/rooki_logo-849693a052386cf26ce4463c7cd64de4.png","alt":"Rooki logo","key":"rnCnKiOZbu","urlSource":"images/logos/rooki_logo.png"},{"type":"text","value":"\n","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"r9KGMbojQG"},{"type":"image","url":"/esgf-cookbook/build/cartopy_logo-0083a5b3a287219ff0c84a0f5698ac7c.png","alt":"Cartopy logo","key":"B0Vw0P4Sc6","urlSource":"images/logos/cartopy_logo.png"}],"key":"qILFi9NdBO"}],"visibility":"show","key":"JTXmO0i251"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Demo: Regridding and Plotting with Rooki and Cartopy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EfAXk1IFNW"}],"identifier":"demo-regridding-and-plotting-with-rooki-and-cartopy","label":"Demo: Regridding and Plotting with Rooki and Cartopy","html_id":"demo-regridding-and-plotting-with-rooki-and-cartopy","implicit":true,"key":"Vwmgk8ARhT"}],"visibility":"show","key":"rtw8hUsfF8"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zX1qKZPZ6n"}],"visibility":"show","key":"dzKyMxEXEA"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"btPuYYowGD"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"SuQDqSSHUd"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In this notebook, we demonstrate how to use Rooki to regrid CMIP model data and plot it in Cartopy for two examples:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"VHKy5eEURX"}],"key":"xhJpKO2hEp"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Regrid two CMIP models onto the same grid","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"fQZnnns7X8"}],"key":"KyZaLaZ5bE"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Coarsen the output for one model","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"DByxvzDo0E"}],"key":"pymmuLmjqD"}],"key":"AFTemaLBEz"}],"key":"AVGwDUYnoL"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"seiVD76gEE"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"dujSgVvEuf"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"b1yw75bizF"}],"key":"eJU5NO1j23"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NcDnqT8hxj"}],"key":"yo3HSTEnZ5"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pDRy2o0JaL"}],"key":"IzJrOzSn0k"}],"key":"FlfubHIODQ"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://projectpythia.org/esgf-cookbook/notebooks/intro-search.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Intro to intake-esgf","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"uR9e5NfgB5"}],"urlSource":"https://projectpythia.org/esgf-cookbook/notebooks/intro-search.html","key":"oCsug0RCwT"}],"key":"eR1G9sFVdt"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"JoyNTtoAZx"}],"key":"iTOZFklMss"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[],"key":"cxb1QqAC2m"}],"key":"vlFqZsselF"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"jhkbbsSIuw"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"JkVrHGVGc5"}],"key":"U9HhxhDn2p"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"FihtRUO6ki"}],"key":"epqivw6qUe"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[],"key":"ifGlJ02c1B"}],"key":"IPJA6sZjUx"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://projectpythia.org/esgf-cookbook/notebooks/rooki.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Using Rooki to access CMIP6 data","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"nstf9yPBIY"}],"urlSource":"https://projectpythia.org/esgf-cookbook/notebooks/rooki.html","key":"EwjGvx5jwV"}],"key":"kig77qVB6U"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"CFZMn5wr5N"}],"key":"YxsN4AgkDr"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Familiarity with rooki","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"GTL8x4sWFJ"}],"key":"WlQ1swaZGX"}],"key":"BkR0jwRAlN"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/data-formats/netcdf-cf.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Understanding of NetCDF","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"RvQTMTVFXp"}],"urlSource":"https://foundations.projectpythia.org/core/data-formats/netcdf-cf.html","key":"LjnCTRlnRD"}],"key":"QAdDc8B7W3"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"OLE5p84kG6"}],"key":"gVZGcFyvjS"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Familiarity with metadata structure","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"RxfkFqPJZS"}],"key":"jIQ9aIaBNs"}],"key":"TBDz1lfrQh"}],"key":"mWp8aFqQgU"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"Xiv2rPiYnp"}],"key":"dkKDX7YGus"},{"type":"text","value":": 15 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"mkB4y76P3a"}],"key":"kAIr67uYbG"}],"key":"u3MeZfVwjt"}],"visibility":"show","key":"dxkz74YapN"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IFmQpuJwsA"}],"key":"u6C6XtIuwp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yQKamyXb3h"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"IRS9nV3QNs"}],"key":"t9gOmSwZXN"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport intake_esgf\n\n# Run this on the DKRZ node in Germany, using the ESGF1 index node at LLNL\nos.environ[\"ROOK_URL\"] = \"http://rook.dkrz.de/wps\"\nintake_esgf.conf.set(indices={\"anl-dev\": False,\n                               \"ornl-dev\": False,\n                               \"esgf-node.llnl.gov\": True})\n\nimport rooki.operators as ops\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\nimport intake_esgf\nfrom intake_esgf import ESGFCatalog\nfrom rooki import rooki\nfrom matplotlib.gridspec import GridSpec\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n","visibility":"show","key":"CCbkbkRl6O"},{"type":"output","id":"0UbFezslzh8dJKprI3uKF","data":[],"visibility":"show","key":"jJplVpDiA8"}],"visibility":"show","key":"itKJCD7msE"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Example 1: Regrid two CMIP6 models onto the same grid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yFp8wtC6gB"}],"identifier":"example-1-regrid-two-cmip6-models-onto-the-same-grid","label":"Example 1: Regrid two CMIP6 models onto the same grid","html_id":"example-1-regrid-two-cmip6-models-onto-the-same-grid","implicit":true,"key":"WANHttPgVJ"}],"visibility":"show","key":"I1buii5k5s"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this example, we want to compare the historical precipitation output between two CMIP models, CESM2 and CanESM5. Here will will look at the annual mean precipitation for 2010.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kIhozKxIGl"}],"key":"Q6vehRROoS"}],"key":"YzKL7uA3XO"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Access the desired datasets using intake-esgf and rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qao6cm2FE9"}],"identifier":"access-the-desired-datasets-using-intake-esgf-and-rooki","label":"Access the desired datasets using intake-esgf and rooki","html_id":"access-the-desired-datasets-using-intake-esgf-and-rooki","implicit":true,"key":"NqcHmkzTy0"}],"key":"ul9TLJ6Z2J"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The function and workflow to read in CMPI6 data using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JL66YheF40"},{"type":"inlineCode","value":"intake-esgf","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aGfhSwBwmF"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VRHCyaBmze"},{"type":"inlineCode","value":"rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rzcMsUsNb3"},{"type":"text","value":" in the next few cells are adapted from ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NiAyTMPxwY"},{"type":"link","url":"https://github.com/ProjectPythia/esgf-cookbook/blob/cf69015a464b68ee28cfdd4a27cee4e9d6ca2ca9/notebooks/use-intake-esgf-with-rooki.ipynb","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"intake​-esgf​-with​-rooki​.ipynb","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UxkQEfLgt7"}],"urlSource":"https://github.com/ProjectPythia/esgf-cookbook/blob/cf69015a464b68ee28cfdd4a27cee4e9d6ca2ca9/notebooks/use-intake-esgf-with-rooki.ipynb","data":{"kind":"file","org":"ProjectPythia","repo":"esgf-cookbook","reference":"cf69015a464b68ee28cfdd4a27cee4e9d6ca2ca9","file":"notebooks/use-intake-esgf-with-rooki.ipynb","raw":"https://raw.githubusercontent.com/ProjectPythia/esgf-cookbook/cf69015a464b68ee28cfdd4a27cee4e9d6ca2ca9/notebooks/use-intake-esgf-with-rooki.ipynb"},"internal":false,"protocol":"github","key":"YTOfLdNGtY"},{"type":"text","value":". Essentially, we use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"W5xetChmtu"},{"type":"inlineCode","value":"intake-esgf","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AU08tji2Bh"},{"type":"text","value":" to find the dataset IDs we want and then subset and average them using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Q8M4A1ftKR"},{"type":"inlineCode","value":"rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"K0uG5KK7c1"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"URXWcHoDcu"}],"key":"X4MgssVKpC"}],"visibility":"show","key":"YvFJXIMmWp"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"def separate_dataset_id(id_list):\n    rooki_id = id_list[0]\n    rooki_id = rooki_id.split(\"|\")[0]\n    #rooki_id = f\"css03_data.{rooki_id}\"  # <-- just something you have to know for now :(\n    return rooki_id\n","visibility":"show","key":"I4dA51KL1l"},{"type":"output","id":"ySL2zgmtncTwBwo7ojQbA","data":[],"visibility":"show","key":"kQMokfOYTG"}],"visibility":"show","key":"mrUnzI4I80"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"cat = ESGFCatalog()\ncat.search(\n        activity_id='CMIP',\n        experiment_id=[\"historical\",],\n        variable_id=[\"pr\"],\n        member_id='r1i1p1f1',\n        grid_label='gn',\n        table_id=\"Amon\",\n        source_id = [ \"CESM2\", \"CanESM5\"]\n    )\n\ndsets = [separate_dataset_id(dataset) for dataset in list(cat.df.id.values)]\ndsets\n","visibility":"show","key":"y6vyXevmle"},{"type":"output","id":"8nGIz3oM8RqLoa_rMWlk1","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"   Searching indices:   0%|          |0/1 [       ?index/s]","content_type":"text/plain"},"application/vnd.jupyter.widget-view+json":{"content":"{\"version_major\":2,\"version_minor\":0,\"model_id\":\"0e4279290f9c45879e5f60a1a55cde3f\"}","content_type":"application/vnd.jupyter.widget-view+json"}}},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/esgf-cookbook-dev/lib/python3.11/site-packages/intake_esgf/catalog.py:316: UserWarning: SolrESGFIndex('esgf-node.llnl.gov') failed to return a response, results may be incomplete\n  warnings.warn(\n"},{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mNoSearchResults\u001b[39m                           Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[3]\u001b[39m\u001b[32m, line 2\u001b[39m\n\u001b[32m      1\u001b[39m cat = ESGFCatalog()\n\u001b[32m----> \u001b[39m\u001b[32m2\u001b[39m \u001b[43mcat\u001b[49m\u001b[43m.\u001b[49m\u001b[43msearch\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m      3\u001b[39m \u001b[43m        \u001b[49m\u001b[43mactivity_id\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mCMIP\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m      4\u001b[39m \u001b[43m        \u001b[49m\u001b[43mexperiment_id\u001b[49m\u001b[43m=\u001b[49m\u001b[43m[\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mhistorical\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      5\u001b[39m \u001b[43m        \u001b[49m\u001b[43mvariable_id\u001b[49m\u001b[43m=\u001b[49m\u001b[43m[\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mpr\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m      6\u001b[39m \u001b[43m        \u001b[49m\u001b[43mmember_id\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mr1i1p1f1\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m      7\u001b[39m \u001b[43m        \u001b[49m\u001b[43mgrid_label\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mgn\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m      8\u001b[39m \u001b[43m        \u001b[49m\u001b[43mtable_id\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mAmon\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m      9\u001b[39m \u001b[43m        \u001b[49m\u001b[43msource_id\u001b[49m\u001b[43m \u001b[49m\u001b[43m=\u001b[49m\u001b[43m \u001b[49m\u001b[43m[\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mCESM2\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mCanESM5\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m]\u001b[49m\n\u001b[32m     10\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m     12\u001b[39m dsets = [separate_dataset_id(dataset) \u001b[38;5;28;01mfor\u001b[39;00m dataset \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mlist\u001b[39m(cat.df.id.values)]\n\u001b[32m     13\u001b[39m dsets\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/esgf-cookbook-dev/lib/python3.11/site-packages/intake_esgf/catalog.py:354\u001b[39m, in \u001b[36mESGFCatalog.search\u001b[39m\u001b[34m(self, quiet, file_start, file_end, **search)\u001b[39m\n\u001b[32m    352\u001b[39m search_time = time.time()\n\u001b[32m    353\u001b[39m dfs = ThreadPool(\u001b[38;5;28mlen\u001b[39m(\u001b[38;5;28mself\u001b[39m.indices)).imap_unordered(_search, \u001b[38;5;28mself\u001b[39m.indices)\n\u001b[32m--> \u001b[39m\u001b[32m354\u001b[39m \u001b[38;5;28mself\u001b[39m.df = \u001b[43mbase\u001b[49m\u001b[43m.\u001b[49m\u001b[43mcombine_results\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    355\u001b[39m \u001b[43m    \u001b[49m\u001b[43mtqdm\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m    356\u001b[39m \u001b[43m        \u001b[49m\u001b[43mdfs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    357\u001b[39m \u001b[43m        \u001b[49m\u001b[43mdisable\u001b[49m\u001b[43m=\u001b[49m\u001b[43mquiet\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    358\u001b[39m \u001b[43m        \u001b[49m\u001b[43mbar_format\u001b[49m\u001b[43m=\u001b[49m\u001b[43mbase\u001b[49m\u001b[43m.\u001b[49m\u001b[43mbar_format\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    359\u001b[39m \u001b[43m        \u001b[49m\u001b[43munit\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mindex\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m    360\u001b[39m \u001b[43m        \u001b[49m\u001b[43munit_scale\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[32m    361\u001b[39m \u001b[43m        \u001b[49m\u001b[43mdesc\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mSearching indices\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m    362\u001b[39m \u001b[43m        \u001b[49m\u001b[43mascii\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[32m    363\u001b[39m \u001b[43m        \u001b[49m\u001b[43mtotal\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mindices\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    364\u001b[39m \u001b[43m    \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    365\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    366\u001b[39m \u001b[38;5;28mself\u001b[39m._set_project()\n\u001b[32m    368\u001b[39m \u001b[38;5;66;03m# even though we are using latest=True, because the search is distributed, we\u001b[39;00m\n\u001b[32m    369\u001b[39m \u001b[38;5;66;03m# may have different versions from different indices.\u001b[39;00m\n\n\u001b[36mFile \u001b[39m\u001b[32m~/micromamba/envs/esgf-cookbook-dev/lib/python3.11/site-packages/intake_esgf/base.py:248\u001b[39m, in \u001b[36mcombine_results\u001b[39m\u001b[34m(dfs)\u001b[39m\n\u001b[32m    246\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(df) == \u001b[32m0\u001b[39m:\n\u001b[32m    247\u001b[39m     logger.info(\u001b[33m\"\u001b[39m\u001b[38;5;130;01m\\x1b\u001b[39;00m\u001b[33m[36;32msearch end \u001b[39m\u001b[38;5;130;01m\\x1b\u001b[39;00m\u001b[33m[91;20mno results\u001b[39m\u001b[38;5;130;01m\\033\u001b[39;00m\u001b[33m[0m\u001b[39m\u001b[33m\"\u001b[39m)\n\u001b[32m--> \u001b[39m\u001b[32m248\u001b[39m     \u001b[38;5;28;01mraise\u001b[39;00m NoSearchResults()\n\u001b[32m    249\u001b[39m \u001b[38;5;66;03m# retrieve project information about how to combine results\u001b[39;00m\n\u001b[32m    250\u001b[39m project_id = df[\u001b[33m\"\u001b[39m\u001b[33mproject\u001b[39m\u001b[33m\"\u001b[39m].unique()\n\n\u001b[31mNoSearchResults\u001b[39m: ","ename":"NoSearchResults","evalue":""}],"visibility":"show","key":"RdvS0QcIQP"}],"visibility":"show","key":"GanQcRJsGF"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Subset the data to get the precipitation variable for 2010 and then average by time:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"k21XcDL7hV"}],"key":"OYzNze5BhS"}],"key":"LI3Fb0fwgI"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"dset_list = [[]]*len(dsets)\n\nfor i, dset_id in enumerate(dsets):\n    wf = ops.AverageByTime(\n        ops.Subset(\n            ops.Input('pr', [dset_id]),\n            time='2010/2010'\n        )\n    )\n\n    resp = wf.orchestrate()\n\n    # if it worked, add the dataset to our list\n    if resp.ok:\n        dset_list[i] = resp.datasets()[0]\n        \n    # if it failed, tell us why\n    else:\n        print(resp.status)\n","visibility":"show","key":"hEWbT5ZV2A"},{"type":"output","id":"Snf0eEegpABiGfvmJa845","data":[],"visibility":"show","key":"M8he0zxKCJ"}],"visibility":"show","key":"upt2NMY7KJ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Print the dataset list to get an overview of the metadata structure:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VmrmVaXHZM"}],"key":"qSbvc8KDnr"}],"key":"m76oWLoEy1"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(dset_list)","visibility":"show","key":"KkrK7wjxqK"},{"type":"output","id":"k3KwMTsRHwMs8791ogTrN","data":[],"visibility":"show","key":"VKGg2qYxTy"}],"visibility":"show","key":"k98tXS6qg1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Compare the precipitation data between models","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LfFyMR68NX"}],"identifier":"compare-the-precipitation-data-between-models","label":"Compare the precipitation data between models","html_id":"compare-the-precipitation-data-between-models","implicit":true,"key":"k610m1kFn9"}],"key":"bF5Ew2QybZ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First, let’s quickly plot the 2010 annual mean precipitation for each model to see what we’re working with. Since precipitation values vary greatly in magnitude, using a log-normalized colormap makes the data easier to visualize.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dCH4i82lgC"}],"key":"ST4GcZhP08"}],"key":"iHwB2XQ4On"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"for dset in dset_list:\n    dset.pr.plot(norm=mcolors.LogNorm())\n    plt.show()","visibility":"show","key":"NfG53TvDif"},{"type":"output","id":"eJDtlQbJtC3ZIh21LfEsW","data":[],"visibility":"show","key":"PYKg4RMlG5"}],"visibility":"show","key":"zUiEV1oIva"},{"type":"block","kind":"notebook-content","data":{"jp-MarkdownHeadingCollapsed":true,"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Uncomment and run the following cell. If we try to take the difference outright, it fails!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nAXgRSTT5u"}],"key":"PltOpTMcGJ"}],"visibility":"show","key":"jfgyENMhbL"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# pr_diff = dset_list[0].pr - dset_list[1].pr","visibility":"show","key":"Pe41HQN0W6"},{"type":"output","id":"y2-KZQdbqrcq9ghTMzg2Q","data":[],"visibility":"show","key":"EQ1tbt2AVe"}],"visibility":"show","key":"ubsJoaIHEJ"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The models have different grids so we can’t directly subtract the data. We can use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bU2cwiNIYn"},{"type":"inlineCode","value":"grid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pAHiIJ41N9"},{"type":"text","value":" attribute to get information on which grid each uses.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"h8a40R6sgC"}],"key":"OyNFLMeeXO"}],"visibility":"show","key":"khl26NS2sc"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(dset_list[0].grid)\nprint(dset_list[1].grid)","visibility":"show","key":"CmjRbuDPqR"},{"type":"output","id":"aBhOH1lnN4Oja5Zs1ITD_","data":[],"visibility":"show","key":"AO21rnQnfX"}],"visibility":"show","key":"dwOPVeauSp"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Regrid the models onto the same grid with Rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KnImDOBiLY"}],"identifier":"regrid-the-models-onto-the-same-grid-with-rooki","label":"Regrid the models onto the same grid with Rooki","html_id":"regrid-the-models-onto-the-same-grid-with-rooki","implicit":true,"key":"EHpTfV0p8P"}],"key":"g0ASTgJXQa"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Look at the documentation on the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aEJyEsb3SC"},{"type":"inlineCode","value":"regrid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PcvHJDOOgL"},{"type":"text","value":" operator to see the available grid types and regrid methods:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JViC4PFVtB"}],"key":"BY6tvKZVqb"}],"visibility":"show","key":"awbeSoExJm"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"rooki.regrid?","visibility":"show","key":"jQufjxwg62"},{"type":"output","id":"J_Jdr4SVTOZlWjC3sjLWF","data":[],"visibility":"show","key":"l70PdcNRpI"}],"visibility":"show","key":"hjh6xv8yK7"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Here we’ll do the same process as before to read in and subset the datasets with rooki, but now we ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"agH7quIFsm"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"regrid using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"q5DpPfdhdW"},{"type":"inlineCode","value":"ops.Regrid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Rv7NgJLcSL"},{"type":"text","value":" before averaging over time","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JiRU0rntTg"}],"key":"L9koBJeV5T"},{"type":"text","value":". In this example, we use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GU9NpAiWHA"},{"type":"inlineCode","value":"method=nearest_s2d","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fS3sIKI2ue"},{"type":"text","value":" to regrid each model onto the target grid using a nearest neighbors method. The target grid is a 1.25° grid, specified by ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bX4QJbyf79"},{"type":"inlineCode","value":"grid='1pt25deg'","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LgIGRrndx4"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"T9q8VpQbFh"}],"key":"xbTHWjkA8k"}],"visibility":"show","key":"w2ZRSPX8u2"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"rg_list = [[]]*len(dsets)\n\nfor i, dset_id in enumerate(dsets):\n    wf = ops.AverageByTime(\n        ops.Regrid(\n            ops.Subset(\n                ops.Input('pr', [dset_id]),\n                time='2010/2010'\n            ),\n            method='nearest_s2d',\n            grid='1pt25deg'\n        )\n    )\n\n\n    resp = wf.orchestrate()\n    \n    # if it worked, add the regridded dataset to our list\n    if resp.ok:\n        rg_list[i] = resp.datasets()[0]\n        \n    # if it failed, tell us why\n    else:\n        print(resp.status)\n        ","visibility":"show","key":"SAUr1iGK4h"},{"type":"output","id":"PUMwyUJzw3ZfcBtZih1Lt","data":[],"visibility":"show","key":"BITMfoYLzn"}],"visibility":"show","key":"PXmn2Ry9uO"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Print the list of regridded datasets to get an overview of the metadata structure. Note how ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gmTv8FN8OR"},{"type":"inlineCode","value":"lat","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"O2kv1LfxPz"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aNlM1p8j1l"},{"type":"inlineCode","value":"lon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LzXYwkioxO"},{"type":"text","value":" are now the same and each dataset has additional attributes, including ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LcqLnzGgFM"},{"type":"inlineCode","value":"grid_original","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"b2Ho5tk93e"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g8FUCrTtfh"},{"type":"inlineCode","value":"regrid_operation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"INcYBhJK8Q"},{"type":"text","value":", which all keep track of the regridding operations we just completed.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yCYylN1L4F"}],"key":"PwynFcCfAo"}],"key":"pX1ylOx1KW"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(rg_list)","visibility":"show","key":"zZb2v1DLkB"},{"type":"output","id":"TwRl16DkyYlVyEieUPosw","data":[],"visibility":"show","key":"SZPCfzeP7W"}],"visibility":"show","key":"gBsiIbLFel"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now they are on the same grid!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"efYHNN2lQy"}],"key":"eoFsjjs7go"}],"key":"RKxHKZP3NO"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(rg_list[0].grid)\nprint(rg_list[1].grid)","visibility":"show","key":"QclsLvjoEl"},{"type":"output","id":"ENBB2GF4MjMbXQu-dWT_l","data":[],"visibility":"show","key":"g6oOnpRYX2"}],"visibility":"show","key":"N2QQslTcij"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Quick plot the before and after for each model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Hxif56vKxh"}],"identifier":"quick-plot-the-before-and-after-for-each-model","label":"Quick plot the before and after for each model","html_id":"quick-plot-the-before-and-after-for-each-model","implicit":true,"key":"iZurYfus44"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The plots largely look the same, as they should - with the nearest neighbors method, we are just shifting the precipitation data onto a different grid without averaging between grid cells.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"I2FvnE5kJv"}],"key":"aGIGsPP7ni"}],"key":"p2RZW6UL5U"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(dset_list[0].source_id)\nfor ds in [dset_list[0], rg_list[0]]:\n    ds.pr.plot(norm=mcolors.LogNorm())\n    plt.show()\n","visibility":"show","key":"w7vxTdAEXR"},{"type":"output","id":"L8oWcWqPjfuRVZIzNY8Ad","data":[],"visibility":"show","key":"OtY8bNQyAa"}],"visibility":"show","key":"YPnj8H1u1u"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(dset_list[1].source_id)\nfor ds in [dset_list[1], rg_list[1]]:\n    ds.pr.plot(norm=mcolors.LogNorm())\n    plt.show()\n","visibility":"show","key":"yZJxQUw91Y"},{"type":"output","id":"0ZY9fmeoHQd7wHYFKACij","data":[],"visibility":"show","key":"LLuZvOvx4I"}],"visibility":"show","key":"VwsWSxmsws"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Take the difference between precipitation datasets and plot it","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bLVvyN1IkW"}],"identifier":"take-the-difference-between-precipitation-datasets-and-plot-it","label":"Take the difference between precipitation datasets and plot it","html_id":"take-the-difference-between-precipitation-datasets-and-plot-it","implicit":true,"key":"PEdSuobE1n"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Now that both models are on the same grid, we can subtract the precipitation datasets and plot the difference!","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"l3TGO3Vc3c"}],"key":"aAVNv0VprQ"}],"key":"maRFHCHxuK"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"pr_diff = rg_list[0] - rg_list[1]\n\npr_diff.pr.plot(cmap=\"bwr\")\nplt.show()\n","visibility":"show","key":"NOF0FoZrDi"},{"type":"output","id":"PS7mwqvA8s9jKhQgV_lWY","data":[],"visibility":"show","key":"ASbfFpKSud"}],"visibility":"show","key":"R29RxeHagZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot everything together","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RlFiT4oslN"}],"identifier":"plot-everything-together","label":"Plot everything together","html_id":"plot-everything-together","implicit":true,"key":"sE9kIXWzq1"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Plot the regridded precipitation data as well as the difference between models on the same figure. We can use ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"fJf8Nr0SsC"},{"type":"inlineCode","value":"Cartopy","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"usVOUCrm9b"},{"type":"text","value":" to make it pretty. With ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"gcTbLZWgl8"},{"type":"inlineCode","value":"GridSpec","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Mt6lv83Q5v"},{"type":"text","value":", we can also split up the figure and organize it to use the same colorbar for more than one panel.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"meuUNsmwFe"}],"key":"ZfrYGqrYck"}],"key":"PMmBmOt8Ab"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# set up figure\nfig = plt.figure(figsize=(6, 8))\ngs = GridSpec(3, 2, width_ratios=[1, 0.1], hspace=0.2)\n\n# specify the projection\nproj = ccrs.Mollweide()\n\n# set up plots for each model\naxpr_1 = plt.subplot(gs[0, 0], projection=proj)\naxpr_2 = plt.subplot(gs[1, 0], projection=proj)\naxdiff = plt.subplot(gs[2, 0], projection=proj)\n\n# axes where the colorbar will go \naxcb_pr = plt.subplot(gs[:2, 1]) \naxcb_diff = plt.subplot(gs[2, 1])\naxcb_pr.axis(\"off\")\naxcb_diff.axis(\"off\")\n\n# plot the precipitation for both models\nfor i, ax in enumerate([axpr_1, axpr_2]):\n    ds_rg = rg_list[i]\n    pcm = ax.pcolormesh(ds_rg.lon, ds_rg.lat, ds_rg.pr.isel(time=0), norm=mcolors.LogNorm(vmin=1e-7, vmax=3e-4),\n                         transform=ccrs.PlateCarree()\n                       )\n    ax.set_title(ds_rg.parent_source_id)\n    ax.add_feature(cfeature.COASTLINE)\n    \n# now plot the difference\npcmd = axdiff.pcolormesh(pr_diff.lon, pr_diff.lat, pr_diff.pr.isel(time=0), cmap=\"bwr\", vmin=-3e-4, vmax=3e-4,\n                         transform=ccrs.PlateCarree()\n                        )\naxdiff.set_title(\"{a} - {b}\".format(a=rg_list[0].parent_source_id, b=rg_list[1].parent_source_id))\naxdiff.add_feature(cfeature.COASTLINE)\n\n# set the precipitation colorbar\naxcb_pr_ins = inset_axes(axcb_pr, width=\"50%\", height=\"75%\", loc=\"center\")\ncbar_pr = plt.colorbar(pcm, cax=axcb_pr_ins, orientation=\"vertical\", extend=\"both\")\ncbar_pr.set_label(\"{n} ({u})\".format(n=rg_list[0].pr.long_name, u=rg_list[0].pr.units))\n\n# set the difference colorbar\naxcb_diff_ins = inset_axes(axcb_diff, width=\"50%\", height=\"100%\", loc=\"center\")\ncbar_diff = plt.colorbar(pcmd, cax=axcb_diff_ins, orientation=\"vertical\", extend=\"both\")\ncbar_diff.set_label(\"Difference ({u})\".format(u=pr_diff.pr.units))\n\nplt.show()\n","visibility":"show","key":"W6xI2pIbrG"},{"type":"output","id":"Can3Ml1s07JIf0qirDnaR","data":[],"visibility":"show","key":"msHI2AYNJs"}],"visibility":"show","key":"YqhRRpK2dw"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Example 2: Coarsen the output for one model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kB8GrUlddl"}],"identifier":"example-2-coarsen-the-output-for-one-model","label":"Example 2: Coarsen the output for one model","html_id":"example-2-coarsen-the-output-for-one-model","implicit":true,"key":"xFW3h9brJf"}],"visibility":"show","key":"vlurUgpAiS"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can also use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aS6lPX6AAn"},{"type":"inlineCode","value":"Rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sT7AnAjVjh"},{"type":"text","value":" to regrid the data from one model onto a coarser grid. In this case, it may make more sense to use a conservative regridding method, which will conserve the physical fluxes between grid cells, rather than the nearest neighbors method we used in Example 1.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TgRlzuhiFj"}],"key":"S8vfDFpqdl"}],"key":"iLdbEqMDmI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get the data using intake-esgf and Rooki again","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aQdEvU4NZb"}],"identifier":"get-the-data-using-intake-esgf-and-rooki-again","label":"Get the data using intake-esgf and Rooki again","html_id":"get-the-data-using-intake-esgf-and-rooki-again","implicit":true,"key":"wXqaK8AT0g"}],"key":"oZIuBcmtHH"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this example, we’ll look at the annual mean near-surface air temperature for CESM2 in 2010.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fbUusUOcaT"}],"key":"y6ACBy0fdu"}],"key":"hdXRL23I94"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"cat = ESGFCatalog()\ncat.search(\n        activity_id='CMIP',\n        experiment_id=[\"historical\",],\n        variable_id=[\"tas\"],\n        member_id='r1i1p1f1',\n        grid_label='gn',\n        table_id=\"Amon\",\n        source_id = [ \"CESM2\"]\n    )\n\ndsets = [separate_dataset_id(dataset) for dataset in list(cat.df.id.values)]\ndsets\n","visibility":"show","key":"Q69WVouqyg"},{"type":"output","id":"hK5DmFtczrrn7Gez6ceqo","data":[],"visibility":"show","key":"gBoF9I46sW"}],"visibility":"show","key":"oLIjjHFCwi"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First, get the dataset with the original grid:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Bbuqeeya3l"}],"key":"oNMhunA3u0"}],"key":"KjnuDcMNfM"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"wf = ops.AverageByTime(\n    ops.Subset(\n        ops.Input('tas', [dsets[0]]),\n        time='2010/2010'\n    )\n)\n\nresp = wf.orchestrate()\n\nif resp.ok:\n    ds_og = resp.datasets()[0]\nelse:\n    print(resp.status)\n","visibility":"show","key":"RP7rsZqgS4"},{"type":"output","id":"3-zFSeTcZBjZK5jSlO_bF","data":[],"visibility":"show","key":"BUHN3WT7FX"}],"visibility":"show","key":"Xg6mS4aNyf"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XhzCaIxDNg"},{"type":"inlineCode","value":".grid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"flthyKxmTe"},{"type":"text","value":" attribute to get information on the native grid:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cKo80GyosN"}],"key":"VZ3CbGbc0W"}],"key":"EVk1NgkvXD"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"ds_og.grid","visibility":"show","key":"tJCS3I48ax"},{"type":"output","id":"iJN8cMEI7NxLVyWqFMA0K","data":[],"visibility":"show","key":"W0v7hHeZsH"}],"visibility":"show","key":"SU2W1AUamH"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The native grid is 0.9°x1.25°, so let’s try coarsening to a 1.25°x1.25° grid using the conservative method:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XNDFdduAQ5"}],"key":"EJ09z4J4bV"}],"key":"sG6I4fNIES"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"wf = ops.AverageByTime(\n    ops.Regrid(\n        ops.Subset(\n            ops.Input('tas', [dsets[0]]),\n            time='2010/2010'\n        ),\n        method='conservative',\n        grid='1pt25deg'\n    )\n)\n\nresp = wf.orchestrate()\n\nif resp.ok:\n    ds_125 = resp.datasets()[0]\nelse:\n    print(resp.status)\n    ","visibility":"show","key":"HxWQiJQMJq"},{"type":"output","id":"VkRy7Dv3TfHCyZ5MXp4k0","data":[],"visibility":"show","key":"gSYb9W3GFp"}],"visibility":"show","key":"Pyp6RTesKt"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"ds_125.grid","visibility":"show","key":"bxUmxD0OqF"},{"type":"output","id":"Pyg67P0vVwQV8e44qqB-T","data":[],"visibility":"show","key":"FAmP0G6D2R"}],"visibility":"show","key":"eM6Y2yPhmh"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can also make it even coarser by regridding to a 2.5°x2.5° grid:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mMa1O5rkRD"}],"key":"BWpQEyA7T9"}],"key":"GcY7QTGGJI"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"wf = ops.AverageByTime(\n    ops.Regrid(\n        ops.Subset(\n            ops.Input('tas', [dsets[0]]),\n            time='2010/2010'\n        ),\n        method='conservative',\n        grid='2pt5deg'\n    )\n)\n\nresp = wf.orchestrate()\n\nif resp.ok:\n    ds_25 = resp.datasets()[0]\nelse:\n    print(resp.status)\n    ","visibility":"show","key":"q8MBjj28il"},{"type":"output","id":"LTSfn2T_bz_5_XgOcKTXp","data":[],"visibility":"show","key":"FN03fMYjiX"}],"visibility":"show","key":"zT9ncROkm4"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"ds_25.grid","visibility":"show","key":"PFoMSLUn7l"},{"type":"output","id":"3bbYwglg-o-Q7mBKBSS2y","data":[],"visibility":"show","key":"wNpfZLaHWo"}],"visibility":"show","key":"A4lEMfRkJx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot each dataset to look at the coarsened grids","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zdRQDCHeHg"}],"identifier":"plot-each-dataset-to-look-at-the-coarsened-grids","label":"Plot each dataset to look at the coarsened grids","html_id":"plot-each-dataset-to-look-at-the-coarsened-grids","implicit":true,"key":"mL9v3qa57e"}],"key":"Mo3Vv4fvYS"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Make a quick plot first:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"d9Mu2h2ogf"}],"key":"lpq4aQOWv2"}],"key":"UF60pKFr40"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"for ds in [ds_og, ds_125, ds_25]:\n    ds[\"tas\"].plot()\n    plt.show()\n    ","visibility":"show","key":"DJ4kHwQdKr"},{"type":"output","id":"556P7Y86tGV9oP30VkbK6","data":[],"visibility":"show","key":"YWyQUUFPfN"}],"visibility":"show","key":"ip8uYfOfig"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot the coarsened datsets together using Cartopy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IjUrGbRKlu"}],"identifier":"plot-the-coarsened-datsets-together-using-cartopy","label":"Plot the coarsened datsets together using Cartopy","html_id":"plot-the-coarsened-datsets-together-using-cartopy","implicit":true,"key":"RpH7f4aJDi"}],"key":"JmI6R0TUUG"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now let’s zoom in on a smaller region, the continental US, to get a clear view of the difference in grid resolution. Here we can also decrease the colorbar limits to better see how the variable ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Rcy7LAOxXh"},{"type":"inlineCode","value":"tas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"UfrXJwh0Ai"},{"type":"text","value":" varies within the smaller region.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"niywHFkgc7"}],"key":"C5s5bKZJM1"}],"visibility":"show","key":"n1VMeUjr33"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# set up the figure\nfig = plt.figure(figsize=(6, 8))\ngs = GridSpec(3, 2, width_ratios=[1, 0.1], height_ratios=[1, 1, 1], hspace=0.3, wspace=0.2)\n\n# specify the projection\nproj = ccrs.PlateCarree()\n\n# set up plot axes\nax1 = plt.subplot(gs[0, 0], projection=proj)\nax2 = plt.subplot(gs[1, 0], projection=proj)\nax3 = plt.subplot(gs[2, 0], projection=proj)\naxes_list = [ax1, ax2, ax3]\n\n# set up colorbar axis\naxcb = plt.subplot(gs[:, 1])\n\n# loop through each dataset and its corresponding axis\nfor i, dset in enumerate([ds_og, ds_125, ds_25]):\n    plot_ds = dset.tas.isel(time=0)\n    ax = axes_list[i]\n    pcm = ax.pcolormesh(plot_ds.lon, plot_ds.lat, plot_ds, vmin=270, vmax=302.5, transform=proj)\n    \n    # add borders and coastlines\n    ax.add_feature(cfeature.BORDERS)\n    ax.coastlines()\n    \n    # limit to CONUS for this example\n    ax.set_xlim(-130, -60)\n    ax.set_ylim(22, 52)\n    \n    # add grid labels on bottom & left only\n    gl = ax.gridlines(color=\"None\", draw_labels=True)\n    gl.top_labels = False\n    gl.right_labels = False\n    \n    # label with the regrid type; if it fails, that means it hasn't been regridded\n    # (so label with the grid attribute instead)\n    try:\n        ax.set_title(dset.regrid_operation)\n    except:\n        ax.set_title(dset.grid)\n        \n# use the same colorbar for all plots\naxcb.axis(\"off\")\naxcb_ins = inset_axes(axcb, width=\"50%\", height=\"75%\", loc=\"center\")\ncbar = plt.colorbar(pcm, cax=axcb_ins, orientation=\"vertical\", extend=\"both\")\ncbar.set_label(\"{n} ({u})\".format(n=plot_ds.long_name, u=plot_ds.units))\n        \nplt.show()\n","visibility":"show","key":"ACHBXFWwkJ"},{"type":"output","id":"wMQWKHjiiEY2VAz5LVAea","data":[],"visibility":"show","key":"SJocgG7rw5"}],"visibility":"show","key":"hvWjfSsJee"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"k2Pb9O7pTC"}],"key":"vup7kWPwyb"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qgdUNbTKHK"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"r3MZXzW1dA"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"Rooki","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bq6Zv8y3hZ"},{"type":"text","value":" offers a quick and easy way to regrid CMIP model data that can be located using ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fTt6fwcdK3"},{"type":"inlineCode","value":"intake-esgf","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"FlwawpvLO7"},{"type":"text","value":". ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tGvQJi1UkA"},{"type":"inlineCode","value":"Cartopy","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zotbQVi82a"},{"type":"text","value":" lets us easily customize the plot to neatly display the geospatial data.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"hYOutKqTP5"}],"key":"yJz09edmUN"}],"key":"Uy9qk5ZNJS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cKizFf23NU"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"bsDdqaig9V"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://climatedataguide.ucar.edu/climate-tools/regridding-overview","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Regridding overview from NCAR","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"pjYTSlj7Bo"}],"urlSource":"https://climatedataguide.ucar.edu/climate-tools/regridding-overview","key":"xdaol5sZ3U"},{"type":"text","value":", including descriptions of various regridding methods","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"HjrnoDUwdw"}],"key":"vQ2jOB8sxm"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://github.com/roocs/rooki/blob/master/notebooks/demo/demo-rooki-regrid-cmip6.ipynb","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Rooki regridding example notebook","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zUXxggyD2I"}],"urlSource":"https://github.com/roocs/rooki/blob/master/notebooks/demo/demo-rooki-regrid-cmip6.ipynb","data":{"kind":"file","org":"roocs","repo":"rooki","reference":"master","file":"notebooks/demo/demo-rooki-regrid-cmip6.ipynb","raw":"https://raw.githubusercontent.com/roocs/rooki/master/notebooks/demo/demo-rooki-regrid-cmip6.ipynb"},"internal":false,"protocol":"github","key":"ajj4XzqW3O"}],"key":"L956oSG6mP"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://rooki.readthedocs.io/en/latest/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Rooki documentation","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"M63xF9LwkC"}],"urlSource":"https://rooki.readthedocs.io/en/latest/","key":"gGbPByW39u"}],"key":"dHHBhzLrW6"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://scitools.org.uk/cartopy/docs/v0.16/gallery/logo.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Cartopy logo image source","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"J8mGdRQ1C6"}],"urlSource":"https://scitools.org.uk/cartopy/docs/v0.16/gallery/logo.html","key":"kCwqXvfetR"}],"key":"tP06roV7fY"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://rooki.readthedocs.io/en/latest/#","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Rooki logo image source","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ZhiXWojtDz"}],"urlSource":"https://rooki.readthedocs.io/en/latest/#","key":"aoJX7sJYeY"}],"key":"vQ22htatdc"}],"key":"ETbn45EeK3"}],"key":"pMAuorTqoc"}],"key":"VJdI9Nh0Md"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Compute Demo: ENSO nonlinearity index with CMIP6 data","url":"/notebooks/rooki-enso-nonlinear","group":"Workflows"},"next":{"title":"Complex Searching with intake and analysing employing xarray","url":"/notebooks/complex-search2-and-analysis","group":"Workflows"}}},"domain":"http://localhost:3000"}