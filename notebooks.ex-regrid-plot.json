{"version":2,"kind":"Notebook","sha256":"af49b1db30fe9319e377b5ff8afe08057f601849c4eb64d85ad3e4febc0e7d4b","slug":"notebooks.ex-regrid-plot","location":"/notebooks/ex-regrid-plot.ipynb","dependencies":[],"frontmatter":{"title":"Demo: Regridding and Plotting with Rooki and Cartopy","content_includes_title":true,"kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"nameParsed":{"literal":"Project Pythia Community","given":"Project Pythia","family":"Community"},"name":"Project Pythia Community","url":"https://projectpythia.org/","id":"contributors-myst-generated-uid-0"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/projectpythia/esgf-cookbook","copyright":"2023","affiliations":[{"id":"University at Albany (State University of New York)","name":"University at Albany (State University of New York)"},{"id":"UCAR/NCAR","name":"UCAR/NCAR"}],"numbering":{"title":{"offset":1}},"edit_url":"https://github.com/projectpythia/esgf-cookbook/blob/main/notebooks/ex-regrid-plot.ipynb","thumbnail":"/esgf-cookbook/build/esgf-3be44722f36effef857ed44223b64f34.png","exports":[{"format":"ipynb","filename":"ex-regrid-plot.ipynb","url":"/esgf-cookbook/build/ex-regrid-plot-ef79c728b81599255521bd28168e9e48.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"image","url":"/esgf-cookbook/build/esgf-3be44722f36effef857ed44223b64f34.png","alt":"ESGF logo","width":250,"key":"GmKMFSl24A","urlSource":"images/esgf.png"},{"type":"text","value":"\n","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MxfIoU96SZ"},{"type":"image","url":"/esgf-cookbook/build/rooki_logo-8b00792c4b16ef8fe7847b1af033998f.png","alt":"Rooki logo","width":125,"key":"ESGdeR8a3I","urlSource":"images/logos/rooki_logo.png"},{"type":"text","value":"\n","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pjUwsMaUXH"},{"type":"image","url":"/esgf-cookbook/build/cartopy_logo-2da6ec9f5d4b72ff03727eb463883806.png","alt":"Cartopy logo","width":250,"key":"jIhuswejZd","urlSource":"images/logos/cartopy_logo.png"}],"key":"B5BfSFWaRi"}],"visibility":"show","key":"PpApaAtYgf"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Demo: Regridding and Plotting with Rooki and Cartopy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FbLcrj9Wtt"}],"identifier":"demo-regridding-and-plotting-with-rooki-and-cartopy","label":"Demo: Regridding and Plotting with Rooki and Cartopy","html_id":"demo-regridding-and-plotting-with-rooki-and-cartopy","implicit":true,"key":"fUCxikHap2"}],"visibility":"show","key":"S2CHZev1T0"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"z6YdCHzCAi"}],"visibility":"show","key":"ouCS0L1N5i"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RnXPMrIstA"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"uA1lviZAdw"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"In this notebook, we demonstrate how to use Rooki to regrid CMIP model data and plot it in Cartopy for two examples:","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"aBtU4mD3MA"}],"key":"YoR171w5b1"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":4,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Regrid two CMIP models onto the same grid","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"jkb4R4HoQn"}],"key":"db8HuZZljd"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Coarsen the output for one model","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"SihA8aud7d"}],"key":"sXx4OrY5UJ"}],"key":"jklYKvWZza"}],"key":"WJgkmEBI7n"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XnxwTPY7dB"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"UDJJwx0ImC"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DcPcScqYRR"}],"key":"yWmopAOEzk"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oiVsu6rAg6"}],"key":"LPtLR6W4hO"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HF54yTMmOA"}],"key":"LUrrBpdw8J"}],"key":"YkFxNKJ8ID"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://projectpythia.org/esgf-cookbook/notebooks/intro-search.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Intro to intake-esgf","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"hHT8zpXa28"}],"urlSource":"https://projectpythia.org/esgf-cookbook/notebooks/intro-search.html","key":"xVcnxGOysR"}],"key":"CMTiQhCx5b"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"cKzfewPsso"}],"key":"JwyXI5tDEc"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[],"key":"dCcOpwBYU1"}],"key":"OYshvkAZpn"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"X4vcqtVuow"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"kYQvWujLWC"}],"key":"Z5yP7q03o5"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Necessary","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"pefYSj6PxN"}],"key":"DFZd550peg"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[],"key":"ia00GwTHam"}],"key":"Gv5cZE0Jag"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://projectpythia.org/esgf-cookbook/notebooks/rooki.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Using Rooki to access CMIP6 data","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dxeagbfAeb"}],"urlSource":"https://projectpythia.org/esgf-cookbook/notebooks/rooki.html","key":"Q5VomSyUKF"}],"key":"FELdNKXW4S"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"qztFzOAPf5"}],"key":"vUJnFcv3nX"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Familiarity with rooki","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"cg1PpOb1KX"}],"key":"r1xgWOBpdx"}],"key":"KCZMsWhOjp"},{"type":"tableRow","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/data-formats/netcdf-cf.html","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Understanding of NetCDF","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"cVgsnEoUmQ"}],"urlSource":"https://foundations.projectpythia.org/core/data-formats/netcdf-cf.html","key":"HzsZ1Emyso"}],"key":"F3kZq5kIYj"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"GqAEhomXOV"}],"key":"ZvWYoAvcKF"},{"type":"tableCell","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Familiarity with metadata structure","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ZP5U58l6uX"}],"key":"AI5nUOIwJO"}],"key":"hnuxqRNhcq"}],"key":"Fa658fCjam"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":10,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":10,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"strong","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"lFJTa4lc8C"}],"key":"dEQQoIhj0M"},{"type":"text","value":": 15 minutes","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"IuHcurxrTi"}],"key":"eXFHBZOxDe"}],"key":"fsFYpZpnzr"}],"visibility":"show","key":"ajMBndB2Jc"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zOqXA1854v"}],"key":"TnkSGgjmuS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DCQ8Xs8Djy"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"CiKEg3D9i4"}],"key":"BToE4cXLjN"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport intake_esgf\n\n# Run this on the DKRZ node in Germany, using the ESGF1 index node at LLNL\nos.environ[\"ROOK_URL\"] = \"http://rook.dkrz.de/wps\"\nintake_esgf.conf.set(indices={\"anl-dev\": False,\n                               \"ornl-dev\": False,\n                               \"esgf-node.llnl.gov\": True})\n\nimport rooki.operators as ops\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\n\nimport intake_esgf\nfrom intake_esgf import ESGFCatalog\nfrom rooki import rooki\nfrom matplotlib.gridspec import GridSpec\nfrom mpl_toolkits.axes_grid1.inset_locator import inset_axes\n","visibility":"show","key":"bRXC5I8JqP"},{"type":"output","id":"_JDTqPE0DqZ-GqtH9RDRe","data":[],"visibility":"show","key":"xTC5gnbdm0"}],"visibility":"show","key":"lryLWRYuqS"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Example 1: Regrid two CMIP6 models onto the same grid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qHbOSgTm1h"}],"identifier":"example-1-regrid-two-cmip6-models-onto-the-same-grid","label":"Example 1: Regrid two CMIP6 models onto the same grid","html_id":"example-1-regrid-two-cmip6-models-onto-the-same-grid","implicit":true,"key":"jQOwFWr2Xj"}],"visibility":"show","key":"stazEseePJ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this example, we want to compare the historical precipitation output between two CMIP models, CESM2 and CanESM5. Here will will look at the annual mean precipitation for 2010.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fAv8kT7UJM"}],"key":"oRogqemzWo"}],"key":"Zn1QHgpIiT"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Access the desired datasets using intake-esgf and rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Hw0thveaO1"}],"identifier":"access-the-desired-datasets-using-intake-esgf-and-rooki","label":"Access the desired datasets using intake-esgf and rooki","html_id":"access-the-desired-datasets-using-intake-esgf-and-rooki","implicit":true,"key":"lt7WnT0S0C"}],"key":"bOPRN5yqdK"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The function and workflow to read in CMPI6 data using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jqmhsNgR9Y"},{"type":"inlineCode","value":"intake-esgf","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"D0RSuuyAYQ"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lLDJbh4fNZ"},{"type":"inlineCode","value":"rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"t4zK3ObgEP"},{"type":"text","value":" in the next few cells are adapted from ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ja11KUw8sW"},{"type":"link","url":"https://github.com/ProjectPythia/esgf-cookbook/blob/cf69015a464b68ee28cfdd4a27cee4e9d6ca2ca9/notebooks/use-intake-esgf-with-rooki.ipynb","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"intake​-esgf​-with​-rooki​.ipynb","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Qlz4YePBA9"}],"urlSource":"https://github.com/ProjectPythia/esgf-cookbook/blob/cf69015a464b68ee28cfdd4a27cee4e9d6ca2ca9/notebooks/use-intake-esgf-with-rooki.ipynb","data":{"kind":"file","org":"ProjectPythia","repo":"esgf-cookbook","reference":"cf69015a464b68ee28cfdd4a27cee4e9d6ca2ca9","file":"notebooks/use-intake-esgf-with-rooki.ipynb","raw":"https://raw.githubusercontent.com/ProjectPythia/esgf-cookbook/cf69015a464b68ee28cfdd4a27cee4e9d6ca2ca9/notebooks/use-intake-esgf-with-rooki.ipynb"},"internal":false,"protocol":"github","key":"s3uTOGG96v"},{"type":"text","value":". Essentially, we use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OpKtgJVNIH"},{"type":"inlineCode","value":"intake-esgf","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eGh0bhubQa"},{"type":"text","value":" to find the dataset IDs we want and then subset and average them using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aZE52WncAm"},{"type":"inlineCode","value":"rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IHjfUwXx2H"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rijTZB4B7Y"}],"key":"AufaAzplqq"}],"visibility":"show","key":"rLUU1wOQcT"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"def separate_dataset_id(id_list):\n    rooki_id = id_list[0]\n    rooki_id = rooki_id.split(\"|\")[0]\n    #rooki_id = f\"css03_data.{rooki_id}\"  # <-- just something you have to know for now :(\n    return rooki_id\n","visibility":"show","key":"TvJ5gz5WXW"},{"type":"output","id":"_m1NiOhwg1hX6zontobt-","data":[],"visibility":"show","key":"v4vdo3TK8P"}],"visibility":"show","key":"NjCukXfX6Z"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"cat = ESGFCatalog()\ncat.search(\n        activity_id='CMIP',\n        experiment_id=[\"historical\",],\n        variable_id=[\"pr\"],\n        member_id='r1i1p1f1',\n        grid_label='gn',\n        table_id=\"Amon\",\n        source_id = [ \"CESM2\", \"CanESM5\"]\n    )\n\ndsets = [separate_dataset_id(dataset) for dataset in list(cat.df.id.values)]\ndsets\n","visibility":"show","key":"RfppeRczvV"},{"type":"output","id":"uFm90ue81mCyxAXKxCb-N","data":[{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/esgf-cookbook-dev/lib/python3.11/site-packages/intake_esgf/catalog.py:79: UserWarning: You have enabled at least one index which uses the old Solr technology. ESGF is moving away from this technology and you may find that some indicesfail to return a response.\n  warnings.warn(\n"},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"   Searching indices:   0%|          |0/2 [       ?index/s]","content_type":"text/plain"},"application/vnd.jupyter.widget-view+json":{"content":"{\"version_major\":2,\"version_minor\":0,\"model_id\":\"878b4d6dc5ce43ad8cec0fbfa720285e\"}","content_type":"application/vnd.jupyter.widget-view+json"}}},{"output_type":"stream","name":"stderr","text":"/home/runner/micromamba/envs/esgf-cookbook-dev/lib/python3.11/site-packages/intake_esgf/catalog.py:323: UserWarning: SolrESGFIndex('esgf-node.llnl.gov') failed to return a response, results may be incomplete\n  warnings.warn(\n"},{"output_type":"execute_result","execution_count":3,"metadata":{},"data":{"text/plain":{"content":"['CMIP6.CMIP.CCCma.CanESM5.historical.r1i1p1f1.Amon.pr.gn.v20190429',\n 'CMIP6.CMIP.NCAR.CESM2.historical.r1i1p1f1.Amon.pr.gn.v20190401']","content_type":"text/plain"}}}],"visibility":"show","key":"cVz9uYEhGC"}],"visibility":"show","key":"xSKz26tsW9"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Subset the data to get the precipitation variable for 2010 and then average by time:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tFIrfptbp7"}],"key":"w9uOav1UDR"}],"key":"s4HPgww7vD"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"dset_list = [[]]*len(dsets)\n\nfor i, dset_id in enumerate(dsets):\n    wf = ops.AverageByTime(\n        ops.Subset(\n            ops.Input('pr', [dset_id]),\n            time='2010/2010'\n        )\n    )\n\n    resp = wf.orchestrate()\n\n    # if it worked, add the dataset to our list\n    if resp.ok:\n        dset_list[i] = resp.datasets()[0]\n        \n    # if it failed, tell us why\n    else:\n        print(resp.status)\n","visibility":"show","key":"myKd4R5Kvl"},{"type":"output","id":"2K-_338cJd0F4wQ9VX_n9","data":[{"output_type":"stream","name":"stdout","text":"Downloading to /tmp/metalink_n6gugedp/pr_Amon_CanESM5_historical_r1i1p1f1_gn_20100101-20100101_avg-year.nc.\n"},{"output_type":"stream","name":"stdout","text":"Downloading to /tmp/metalink_g7knqcj0/pr_Amon_CESM2_historical_r1i1p1f1_gn_20100101-20100101_avg-year.nc.\n"}],"visibility":"show","key":"vFUT9uRxe7"}],"visibility":"show","key":"jKwk4dJUKe"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Print the dataset list to get an overview of the metadata structure:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uA7m3TUD9L"}],"key":"lzJeiq4pGL"}],"key":"bpvQWKQ3Ia"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(dset_list)","visibility":"show","key":"jffo3NN4CB"},{"type":"output","id":"AVGidgQTDjtUEnV7yYRd6","data":[{"output_type":"stream","name":"stdout","text":"[<xarray.Dataset> Size: 37kB\nDimensions:    (time: 1, lat: 64, bnds: 2, lon: 128)\nCoordinates:\n  * lat        (lat) float64 512B -87.86 -85.1 -82.31 ... 82.31 85.1 87.86\n  * lon        (lon) float64 1kB 0.0 2.812 5.625 8.438 ... 351.6 354.4 357.2\n  * time       (time) object 8B 2010-01-01 00:00:00\nDimensions without coordinates: bnds\nData variables:\n    lat_bnds   (time, lat, bnds) float64 1kB ...\n    lon_bnds   (time, lon, bnds) float64 2kB ...\n    pr         (time, lat, lon) float32 33kB ...\n    time_bnds  (time, bnds) object 16B ...\nAttributes: (12/53)\n    CCCma_model_hash:            3dedf95315d603326fde4f5340dc0519d80d10c0\n    CCCma_parent_runid:          rc3-pictrl\n    CCCma_pycmor_hash:           33c30511acc319a98240633965a04ca99c26427e\n    CCCma_runid:                 rc3.1-his01\n    Conventions:                 CF-1.7 CMIP-6.2\n    YMDH_branch_time_in_child:   1850:01:01:00\n    ...                          ...\n    tracking_id:                 hdl:21.14100/363e1ebe-46e7-43dc-9feb-a7a4a0c...\n    variable_id:                 pr\n    variant_label:               r1i1p1f1\n    version:                     v20190429\n    license:                     CMIP6 model data produced by The Government ...\n    cmor_version:                3.4.0, <xarray.Dataset> Size: 233kB\nDimensions:    (time: 1, lat: 192, lon: 288, nbnd: 2)\nCoordinates:\n  * lat        (lat) float64 2kB -90.0 -89.06 -88.12 -87.17 ... 88.12 89.06 90.0\n  * lon        (lon) float64 2kB 0.0 1.25 2.5 3.75 ... 355.0 356.2 357.5 358.8\n  * time       (time) object 8B 2010-01-01 00:00:00\nDimensions without coordinates: nbnd\nData variables:\n    pr         (time, lat, lon) float32 221kB ...\n    lat_bnds   (time, lat, nbnd) float64 3kB ...\n    lon_bnds   (time, lon, nbnd) float64 5kB ...\n    time_bnds  (time, nbnd) object 16B ...\nAttributes: (12/45)\n    Conventions:            CF-1.7 CMIP-6.2\n    activity_id:            CMIP\n    branch_method:          standard\n    branch_time_in_child:   674885.0\n    branch_time_in_parent:  219000.0\n    case_id:                15\n    ...                     ...\n    sub_experiment_id:      none\n    table_id:               Amon\n    tracking_id:            hdl:21.14100/a2c2f719-6790-484b-9f66-392e62cd0eb8\n    variable_id:            pr\n    variant_info:           CMIP6 20th century experiments (1850-2014) with C...\n    variant_label:          r1i1p1f1]\n"}],"visibility":"show","key":"cTVKCVYUIg"}],"visibility":"show","key":"BKtmtzTg9u"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Compare the precipitation data between models","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PfoomAHGcx"}],"identifier":"compare-the-precipitation-data-between-models","label":"Compare the precipitation data between models","html_id":"compare-the-precipitation-data-between-models","implicit":true,"key":"gm16Ju7ZmV"}],"key":"Eco0kY8aJr"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First, let’s quickly plot the 2010 annual mean precipitation for each model to see what we’re working with. Since precipitation values vary greatly in magnitude, using a log-normalized colormap makes the data easier to visualize.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CUMOkDPwP7"}],"key":"B3EwBnuSXF"}],"key":"Hfo3GJAalD"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"for dset in dset_list:\n    dset.pr.plot(norm=mcolors.LogNorm())\n    plt.show()","visibility":"show","key":"iMeaGGeGnT"},{"type":"output","id":"f7LNQKoywhDrmmFLo4GG-","data":[{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"b760f393e344a047915437d35449d7c2","path":"/esgf-cookbook/build/b760f393e344a047915437d35449d7c2.png"}}},{"output_type":"display_data","metadata":{},"data":{"text/plain":{"content":"<Figure size 640x480 with 2 Axes>","content_type":"text/plain"},"image/png":{"content_type":"image/png","hash":"67a9fc1032f4543e61d9864d1cc4a5fc","path":"/esgf-cookbook/build/67a9fc1032f4543e61d9864d1cc4a5fc.png"}}}],"visibility":"show","key":"bvO1Y2ZTIq"}],"visibility":"show","key":"hJdvtfa4Kn"},{"type":"block","kind":"notebook-content","data":{"jp-MarkdownHeadingCollapsed":true,"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Uncomment and run the following cell. If we try to take the difference outright, it fails!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"shJVZKGOLV"}],"key":"m7QEo6TdpZ"}],"visibility":"show","key":"WM3zUSt2Mw"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# pr_diff = dset_list[0].pr - dset_list[1].pr","visibility":"show","key":"RYZKrqtDG2"},{"type":"output","id":"mWukUAHL-NBEHIsteeBjg","data":[],"visibility":"show","key":"J1RoLE7w3D"}],"visibility":"show","key":"U6Sbcm9Cyu"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The models have different grids so we can’t directly subtract the data. We can use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"z5y9HNrg7r"},{"type":"inlineCode","value":"grid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QJ3S4iINrR"},{"type":"text","value":" attribute to get information on which grid each uses.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YXcD8EY32R"}],"key":"GPn0a56NNm"}],"visibility":"show","key":"RKkL2PQh4N"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(dset_list[0].grid)\nprint(dset_list[1].grid)","visibility":"show","key":"Z5TvHazXYn"},{"type":"output","id":"9Q-vL5BVf0kXlBB-Jxla8","data":[{"output_type":"stream","name":"stdout","text":"T63L49 native atmosphere, T63 Linear Gaussian Grid; 128 x 64 longitude/latitude; 49 levels; top level 1 hPa\nnative 0.9x1.25 finite volume grid (192x288 latxlon)\n"}],"visibility":"show","key":"gUWSx7SMiJ"}],"visibility":"show","key":"EFW5Tl4D1r"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Regrid the models onto the same grid with Rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"l5H4XNBqSb"}],"identifier":"regrid-the-models-onto-the-same-grid-with-rooki","label":"Regrid the models onto the same grid with Rooki","html_id":"regrid-the-models-onto-the-same-grid-with-rooki","implicit":true,"key":"Xg68ILQq5r"}],"key":"IS9mUyOLp3"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Look at the documentation on the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YH4O83N1MA"},{"type":"inlineCode","value":"regrid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"j4Refrm8Ry"},{"type":"text","value":" operator to see the available grid types and regrid methods:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cj2vXJVmdS"}],"key":"UIPlmjO7zK"}],"visibility":"show","key":"U0doqYB0iF"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"rooki.regrid?","visibility":"show","key":"aSesPC21Vf"},{"type":"output","id":"BaaiL3aWyCbNwBHF5mJGK","data":[],"visibility":"show","key":"bP6YHqMXRq"}],"visibility":"show","key":"ojZ0EDvmbe"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Here we’ll do the same process as before to read in and subset the datasets with rooki, but now we ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PqvOcPcL8j"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"regrid using ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Xrfjq3W6KK"},{"type":"inlineCode","value":"ops.Regrid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EWdug901xB"},{"type":"text","value":" before averaging over time","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OWKuMeOYeH"}],"key":"phV5HnT2KT"},{"type":"text","value":". In this example, we use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rT4aWFENE1"},{"type":"inlineCode","value":"method=nearest_s2d","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Zuzshce6qL"},{"type":"text","value":" to regrid each model onto the target grid using a nearest neighbors method. The target grid is a 1.25° grid, specified by ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Q3LbwpFyv0"},{"type":"inlineCode","value":"grid='1pt25deg'","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"bHAe1xuVGo"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HQ8fjjllXJ"}],"key":"EFktMMqHhQ"}],"visibility":"show","key":"eFyQoMZSH5"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"rg_list = [[]]*len(dsets)\n\nfor i, dset_id in enumerate(dsets):\n    wf = ops.AverageByTime(\n        ops.Regrid(\n            ops.Subset(\n                ops.Input('pr', [dset_id]),\n                time='2010/2010'\n            ),\n            method='nearest_s2d',\n            grid='1pt25deg'\n        )\n    )\n\n\n    resp = wf.orchestrate()\n    \n    # if it worked, add the regridded dataset to our list\n    if resp.ok:\n        rg_list[i] = resp.datasets()[0]\n        \n    # if it failed, tell us why\n    else:\n        print(resp.status)\n        ","visibility":"show","key":"nZCmvBOdsF"},{"type":"output","id":"gJ0KrxBDHmEbb7tPmTZYz","data":[{"output_type":"stream","name":"stdout","text":"Process error: not enough values to unpack expected 1, got 0\n"},{"output_type":"stream","name":"stdout","text":"Process error: not enough values to unpack expected 1, got 0\n"}],"visibility":"show","key":"yY2R3etD6K"}],"visibility":"show","key":"FG4X3WESNc"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Print the list of regridded datasets to get an overview of the metadata structure. Note how ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zeNK527Gag"},{"type":"inlineCode","value":"lat","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wM6Bd9iujU"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kxmFCCblfU"},{"type":"inlineCode","value":"lon","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gDOQjNJn7m"},{"type":"text","value":" are now the same and each dataset has additional attributes, including ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HqE0EqZ9Id"},{"type":"inlineCode","value":"grid_original","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qP24zY8HKE"},{"type":"text","value":" and ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AJJKbYqLlt"},{"type":"inlineCode","value":"regrid_operation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cdOq6SKW4O"},{"type":"text","value":", which all keep track of the regridding operations we just completed.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PYzEeKWIlH"}],"key":"iE4icM9em6"}],"key":"Xm61KrU8tv"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(rg_list)","visibility":"show","key":"WWiAj0cgSe"},{"type":"output","id":"6DzjI1maZMqope5cK1k2n","data":[{"output_type":"stream","name":"stdout","text":"[[], []]\n"}],"visibility":"show","key":"mM4YYRkka8"}],"visibility":"show","key":"soxEFzzyfF"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now they are on the same grid!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QAQXmwrS0e"}],"key":"Q9NuwNA2Fi"}],"key":"oZoHRyc2ng"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(rg_list[0].grid)\nprint(rg_list[1].grid)","visibility":"show","key":"M5fedQhXN1"},{"type":"output","id":"COaleqwmihYtvvZBLLbcu","data":[{"output_type":"error","traceback":"\u001b[31m---------------------------------------------------------------------------\u001b[39m\n\u001b[31mAttributeError\u001b[39m                            Traceback (most recent call last)\n\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[12]\u001b[39m\u001b[32m, line 1\u001b[39m\n\u001b[32m----> \u001b[39m\u001b[32m1\u001b[39m \u001b[38;5;28mprint\u001b[39m(\u001b[43mrg_list\u001b[49m\u001b[43m[\u001b[49m\u001b[32;43m0\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m.\u001b[49m\u001b[43mgrid\u001b[49m)\n\u001b[32m      2\u001b[39m \u001b[38;5;28mprint\u001b[39m(rg_list[\u001b[32m1\u001b[39m].grid)\n\n\u001b[31mAttributeError\u001b[39m: 'list' object has no attribute 'grid'","ename":"AttributeError","evalue":"'list' object has no attribute 'grid'"}],"visibility":"show","key":"nX9B2ch2zy"}],"visibility":"show","key":"NPiy39Tgev"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Quick plot the before and after for each model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dh4i37qB2M"}],"identifier":"quick-plot-the-before-and-after-for-each-model","label":"Quick plot the before and after for each model","html_id":"quick-plot-the-before-and-after-for-each-model","implicit":true,"key":"aWr3IHmRfY"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The plots largely look the same, as they should - with the nearest neighbors method, we are just shifting the precipitation data onto a different grid without averaging between grid cells.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"dpPebGQqvL"}],"key":"dcmUmjXFe4"}],"key":"XS5OLlkIcn"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(dset_list[0].source_id)\nfor ds in [dset_list[0], rg_list[0]]:\n    ds.pr.plot(norm=mcolors.LogNorm())\n    plt.show()\n","visibility":"show","key":"xeM4Snw7kV"},{"type":"output","id":"aURRAKCpiYT-I44sL4jvl","data":[],"visibility":"show","key":"xTpQvgFrYo"}],"visibility":"show","key":"VbIZCGvqcP"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"print(dset_list[1].source_id)\nfor ds in [dset_list[1], rg_list[1]]:\n    ds.pr.plot(norm=mcolors.LogNorm())\n    plt.show()\n","visibility":"show","key":"dCNlFuRA4Y"},{"type":"output","id":"B7KVQWDxXjGIn9YQYdnCx","data":[],"visibility":"show","key":"suJsC3juHu"}],"visibility":"show","key":"SAUmQFYeT3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":4,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Take the difference between precipitation datasets and plot it","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HQUGOfYk5X"}],"identifier":"take-the-difference-between-precipitation-datasets-and-plot-it","label":"Take the difference between precipitation datasets and plot it","html_id":"take-the-difference-between-precipitation-datasets-and-plot-it","implicit":true,"key":"XWui4kEYv4"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Now that both models are on the same grid, we can subtract the precipitation datasets and plot the difference!","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"lErLiDM1AW"}],"key":"JHwI8SUnut"}],"key":"a81YkrkFF4"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"pr_diff = rg_list[0] - rg_list[1]\n\npr_diff.pr.plot(cmap=\"bwr\")\nplt.show()\n","visibility":"show","key":"PVcQ094W0C"},{"type":"output","id":"MAArPheewAHQ-2RKBf-vL","data":[],"visibility":"show","key":"GLlufTPTn1"}],"visibility":"show","key":"q89hJOdKUm"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot everything together","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"h54d6sje7w"}],"identifier":"plot-everything-together","label":"Plot everything together","html_id":"plot-everything-together","implicit":true,"key":"YyeVkQQvjd"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Plot the regridded precipitation data as well as the difference between models on the same figure. We can use ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"AnHaYjlP4u"},{"type":"inlineCode","value":"Cartopy","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"O5M9bB8fql"},{"type":"text","value":" to make it pretty. With ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"GRbzWFLz6c"},{"type":"inlineCode","value":"GridSpec","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"HsVslB7Vaj"},{"type":"text","value":", we can also split up the figure and organize it to use the same colorbar for more than one panel.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cxczKPpBkH"}],"key":"elsKFA6fUs"}],"key":"XIcYAw2gih"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# set up figure\nfig = plt.figure(figsize=(6, 8))\ngs = GridSpec(3, 2, width_ratios=[1, 0.1], hspace=0.2)\n\n# specify the projection\nproj = ccrs.Mollweide()\n\n# set up plots for each model\naxpr_1 = plt.subplot(gs[0, 0], projection=proj)\naxpr_2 = plt.subplot(gs[1, 0], projection=proj)\naxdiff = plt.subplot(gs[2, 0], projection=proj)\n\n# axes where the colorbar will go \naxcb_pr = plt.subplot(gs[:2, 1]) \naxcb_diff = plt.subplot(gs[2, 1])\naxcb_pr.axis(\"off\")\naxcb_diff.axis(\"off\")\n\n# plot the precipitation for both models\nfor i, ax in enumerate([axpr_1, axpr_2]):\n    ds_rg = rg_list[i]\n    pcm = ax.pcolormesh(ds_rg.lon, ds_rg.lat, ds_rg.pr.isel(time=0), norm=mcolors.LogNorm(vmin=1e-7, vmax=3e-4),\n                         transform=ccrs.PlateCarree()\n                       )\n    ax.set_title(ds_rg.parent_source_id)\n    ax.add_feature(cfeature.COASTLINE)\n    \n# now plot the difference\npcmd = axdiff.pcolormesh(pr_diff.lon, pr_diff.lat, pr_diff.pr.isel(time=0), cmap=\"bwr\", vmin=-3e-4, vmax=3e-4,\n                         transform=ccrs.PlateCarree()\n                        )\naxdiff.set_title(\"{a} - {b}\".format(a=rg_list[0].parent_source_id, b=rg_list[1].parent_source_id))\naxdiff.add_feature(cfeature.COASTLINE)\n\n# set the precipitation colorbar\naxcb_pr_ins = inset_axes(axcb_pr, width=\"50%\", height=\"75%\", loc=\"center\")\ncbar_pr = plt.colorbar(pcm, cax=axcb_pr_ins, orientation=\"vertical\", extend=\"both\")\ncbar_pr.set_label(\"{n} ({u})\".format(n=rg_list[0].pr.long_name, u=rg_list[0].pr.units))\n\n# set the difference colorbar\naxcb_diff_ins = inset_axes(axcb_diff, width=\"50%\", height=\"100%\", loc=\"center\")\ncbar_diff = plt.colorbar(pcmd, cax=axcb_diff_ins, orientation=\"vertical\", extend=\"both\")\ncbar_diff.set_label(\"Difference ({u})\".format(u=pr_diff.pr.units))\n\nplt.show()\n","visibility":"show","key":"RhJOAW0fRj"},{"type":"output","id":"JZzRqioAe8VfplKv_SeBM","data":[],"visibility":"show","key":"qTByXY17Dg"}],"visibility":"show","key":"rTHiYEYXs0"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Example 2: Coarsen the output for one model","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OybPsrp66s"}],"identifier":"example-2-coarsen-the-output-for-one-model","label":"Example 2: Coarsen the output for one model","html_id":"example-2-coarsen-the-output-for-one-model","implicit":true,"key":"n0e28PKylm"}],"visibility":"show","key":"zAheDWmsMQ"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can also use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EPiAgM3Wnd"},{"type":"inlineCode","value":"Rooki","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OSMw4iGznk"},{"type":"text","value":" to regrid the data from one model onto a coarser grid. In this case, it may make more sense to use a conservative regridding method, which will conserve the physical fluxes between grid cells, rather than the nearest neighbors method we used in Example 1.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aHUkHQKH3O"}],"key":"q4PdaXRwUg"}],"key":"IHcrzhXQxF"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get the data using intake-esgf and Rooki again","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EpAFs4jQJv"}],"identifier":"get-the-data-using-intake-esgf-and-rooki-again","label":"Get the data using intake-esgf and Rooki again","html_id":"get-the-data-using-intake-esgf-and-rooki-again","implicit":true,"key":"SCD61KEJPa"}],"key":"lGIiJt0eqE"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"In this example, we’ll look at the annual mean near-surface air temperature for CESM2 in 2010.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lZ3QyUCyWc"}],"key":"CktlbcoZv0"}],"key":"rN1PEs9oen"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"cat = ESGFCatalog()\ncat.search(\n        activity_id='CMIP',\n        experiment_id=[\"historical\",],\n        variable_id=[\"tas\"],\n        member_id='r1i1p1f1',\n        grid_label='gn',\n        table_id=\"Amon\",\n        source_id = [ \"CESM2\"]\n    )\n\ndsets = [separate_dataset_id(dataset) for dataset in list(cat.df.id.values)]\ndsets\n","visibility":"show","key":"ka6atZ9d12"},{"type":"output","id":"vvOmbebiqaORslI2UN1RB","data":[],"visibility":"show","key":"O0XIPXwLHZ"}],"visibility":"show","key":"QyJXZodIQu"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"First, get the dataset with the original grid:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YVESqV6dBK"}],"key":"b88ZQwAGXg"}],"key":"lo6Tvmlufp"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"wf = ops.AverageByTime(\n    ops.Subset(\n        ops.Input('tas', [dsets[0]]),\n        time='2010/2010'\n    )\n)\n\nresp = wf.orchestrate()\n\nif resp.ok:\n    ds_og = resp.datasets()[0]\nelse:\n    print(resp.status)\n","visibility":"show","key":"oad1XGVTIJ"},{"type":"output","id":"W_g1t9bqGe5cMgbr7Ho8L","data":[],"visibility":"show","key":"OSiU4crTDB"}],"visibility":"show","key":"ZRmDztkEdB"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"f2GVDumm5g"},{"type":"inlineCode","value":".grid","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JhdcdxXvEV"},{"type":"text","value":" attribute to get information on the native grid:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Bt5ZNVvQOL"}],"key":"aPieGe63fM"}],"key":"XzFm4w9duK"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"ds_og.grid","visibility":"show","key":"KBwfE48USv"},{"type":"output","id":"Qk5eUl-etx0kKvIjB5M_W","data":[],"visibility":"show","key":"cQfBjcu08q"}],"visibility":"show","key":"mkdfGZrped"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The native grid is 0.9°x1.25°, so let’s try coarsening to a 1.25°x1.25° grid using the conservative method:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pbq0hZsOjz"}],"key":"ZVSLBEKX8r"}],"key":"wg1G1ac6mg"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"wf = ops.AverageByTime(\n    ops.Regrid(\n        ops.Subset(\n            ops.Input('tas', [dsets[0]]),\n            time='2010/2010'\n        ),\n        method='conservative',\n        grid='1pt25deg'\n    )\n)\n\nresp = wf.orchestrate()\n\nif resp.ok:\n    ds_125 = resp.datasets()[0]\nelse:\n    print(resp.status)\n    ","visibility":"show","key":"rqpcjwRmeg"},{"type":"output","id":"L-RKZg47OGfd4yBi_4zf0","data":[],"visibility":"show","key":"EDlrxbR4Qi"}],"visibility":"show","key":"lvTEowhxbs"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"ds_125.grid","visibility":"show","key":"TtVmml1Oik"},{"type":"output","id":"gwbb_XYB5xzuuEKb4z5H4","data":[],"visibility":"show","key":"j402UYinrG"}],"visibility":"show","key":"KQ2hAAQ3Re"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can also make it even coarser by regridding to a 2.5°x2.5° grid:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VJ9tmC8Pyr"}],"key":"FWATFelBgR"}],"key":"doo11svjKv"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"wf = ops.AverageByTime(\n    ops.Regrid(\n        ops.Subset(\n            ops.Input('tas', [dsets[0]]),\n            time='2010/2010'\n        ),\n        method='conservative',\n        grid='2pt5deg'\n    )\n)\n\nresp = wf.orchestrate()\n\nif resp.ok:\n    ds_25 = resp.datasets()[0]\nelse:\n    print(resp.status)\n    ","visibility":"show","key":"hcHt50bZET"},{"type":"output","id":"v5kcSWVrMmfoOv_KK2PHd","data":[],"visibility":"show","key":"IsBdaJPjfg"}],"visibility":"show","key":"s4Qh34UXgQ"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"ds_25.grid","visibility":"show","key":"PSz7u8Z0Qh"},{"type":"output","id":"-VfGUbVC1hhxvyL56kEFi","data":[],"visibility":"show","key":"SuAP1w5L1Y"}],"visibility":"show","key":"pdXKhw5bo2"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot each dataset to look at the coarsened grids","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"u7i7M4cXoi"}],"identifier":"plot-each-dataset-to-look-at-the-coarsened-grids","label":"Plot each dataset to look at the coarsened grids","html_id":"plot-each-dataset-to-look-at-the-coarsened-grids","implicit":true,"key":"maXh3Wjcqi"}],"key":"CVx60uWd7o"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Make a quick plot first:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"B7zZXhgzYX"}],"key":"CS7Mf46L0I"}],"key":"T6atQ8Qfw2"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"for ds in [ds_og, ds_125, ds_25]:\n    ds[\"tas\"].plot()\n    plt.show()\n    ","visibility":"show","key":"NfaUir7IYS"},{"type":"output","id":"NEH9U4L6zKxm2FY7iOHu7","data":[],"visibility":"show","key":"XMtCghqZ72"}],"visibility":"show","key":"mkXBEsPUEw"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot the coarsened datsets together using Cartopy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qvcAq2qhxX"}],"identifier":"plot-the-coarsened-datsets-together-using-cartopy","label":"Plot the coarsened datsets together using Cartopy","html_id":"plot-the-coarsened-datsets-together-using-cartopy","implicit":true,"key":"K7agpGX9FU"}],"key":"SOfRq2NxgS"},{"type":"block","kind":"notebook-content","data":{"tags":[]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now let’s zoom in on a smaller region, the continental US, to get a clear view of the difference in grid resolution. Here we can also decrease the colorbar limits to better see how the variable ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RzEh1qqzxj"},{"type":"inlineCode","value":"tas","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"sOSpZgAi2c"},{"type":"text","value":" varies within the smaller region.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xyEKDSswrk"}],"key":"XriRVdSJkZ"}],"visibility":"show","key":"t4nCjXHJLF"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"# set up the figure\nfig = plt.figure(figsize=(6, 8))\ngs = GridSpec(3, 2, width_ratios=[1, 0.1], height_ratios=[1, 1, 1], hspace=0.3, wspace=0.2)\n\n# specify the projection\nproj = ccrs.PlateCarree()\n\n# set up plot axes\nax1 = plt.subplot(gs[0, 0], projection=proj)\nax2 = plt.subplot(gs[1, 0], projection=proj)\nax3 = plt.subplot(gs[2, 0], projection=proj)\naxes_list = [ax1, ax2, ax3]\n\n# set up colorbar axis\naxcb = plt.subplot(gs[:, 1])\n\n# loop through each dataset and its corresponding axis\nfor i, dset in enumerate([ds_og, ds_125, ds_25]):\n    plot_ds = dset.tas.isel(time=0)\n    ax = axes_list[i]\n    pcm = ax.pcolormesh(plot_ds.lon, plot_ds.lat, plot_ds, vmin=270, vmax=302.5, transform=proj)\n    \n    # add borders and coastlines\n    ax.add_feature(cfeature.BORDERS)\n    ax.coastlines()\n    \n    # limit to CONUS for this example\n    ax.set_xlim(-130, -60)\n    ax.set_ylim(22, 52)\n    \n    # add grid labels on bottom & left only\n    gl = ax.gridlines(color=\"None\", draw_labels=True)\n    gl.top_labels = False\n    gl.right_labels = False\n    \n    # label with the regrid type; if it fails, that means it hasn't been regridded\n    # (so label with the grid attribute instead)\n    try:\n        ax.set_title(dset.regrid_operation)\n    except:\n        ax.set_title(dset.grid)\n        \n# use the same colorbar for all plots\naxcb.axis(\"off\")\naxcb_ins = inset_axes(axcb, width=\"50%\", height=\"75%\", loc=\"center\")\ncbar = plt.colorbar(pcm, cax=axcb_ins, orientation=\"vertical\", extend=\"both\")\ncbar.set_label(\"{n} ({u})\".format(n=plot_ds.long_name, u=plot_ds.units))\n        \nplt.show()\n","visibility":"show","key":"jHGIcpOiRe"},{"type":"output","id":"3TtJGgBAKJpyE-YTeA540","data":[],"visibility":"show","key":"xCmlfKn6iW"}],"visibility":"show","key":"Ag4DKdS0Qn"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AaCUVfMTkG"}],"key":"s64g4fOrS1"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nKf8uek66Q"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"YTsuAOCLA9"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"inlineCode","value":"Rooki","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"bJILOzlLun"},{"type":"text","value":" offers a quick and easy way to regrid CMIP model data that can be located using ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"T0mafCXG9P"},{"type":"inlineCode","value":"intake-esgf","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"g0Ksx6zM9J"},{"type":"text","value":". ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pzOWTTpiWj"},{"type":"inlineCode","value":"Cartopy","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"nwMICpsdwy"},{"type":"text","value":" lets us easily customize the plot to neatly display the geospatial data.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GqgWRkAofE"}],"key":"M1LxO9qNiv"}],"key":"d4LObnYrRo"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kU8tqkh2SV"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"qBUU0n3RNT"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":2,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"link","url":"https://climatedataguide.ucar.edu/climate-tools/regridding-overview","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Regridding overview from NCAR","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"zYlE4CVO8l"}],"urlSource":"https://climatedataguide.ucar.edu/climate-tools/regridding-overview","key":"OTeGFLIgmp"},{"type":"text","value":", including descriptions of various regridding methods","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"w11v3yZqEK"}],"key":"DpjxVU36Y1"},{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://github.com/roocs/rooki/blob/master/notebooks/demo/demo-rooki-regrid-cmip6.ipynb","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Rooki regridding example notebook","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OZn2XEWRaH"}],"urlSource":"https://github.com/roocs/rooki/blob/master/notebooks/demo/demo-rooki-regrid-cmip6.ipynb","data":{"kind":"file","org":"roocs","repo":"rooki","reference":"master","file":"notebooks/demo/demo-rooki-regrid-cmip6.ipynb","raw":"https://raw.githubusercontent.com/roocs/rooki/master/notebooks/demo/demo-rooki-regrid-cmip6.ipynb"},"internal":false,"protocol":"github","key":"qlJg7Ggc4e"}],"key":"NfkVXqcgOn"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://rooki.readthedocs.io/en/latest/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Rooki documentation","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"SvrzWmSpLS"}],"urlSource":"https://rooki.readthedocs.io/en/latest/","key":"hsPGtEU5Zp"}],"key":"hDGCiHvGig"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://scitools.org.uk/cartopy/docs/v0.16/gallery/logo.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Cartopy logo image source","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"yh94WS0qZi"}],"urlSource":"https://scitools.org.uk/cartopy/docs/v0.16/gallery/logo.html","key":"ReQvgvt5Ry"}],"key":"Z7p1z7NWKY"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://rooki.readthedocs.io/en/latest/#","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Rooki logo image source","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"mH461SNLzb"}],"urlSource":"https://rooki.readthedocs.io/en/latest/#","key":"DFatFt2QZf"}],"key":"NGDN2uD9Ws"}],"key":"qUIqWg53nG"}],"key":"rvJ6OYbzfj"}],"key":"U0Ys1wZCEY"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Compute Demo: ENSO nonlinearity index with CMIP6 data","url":"/notebooks/rooki-enso-nonlinear","group":"Workflows"},"next":{"title":"Complex Searching with intake and analysing employing xarray","url":"/notebooks/complex-search2-and-analysis","group":"Workflows"}}},"domain":"http://localhost:3000"}